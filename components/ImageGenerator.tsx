
import React, { useState, useCallback } from 'react';
import { generateImage } from '../services/geminiService';
import Spinner from './Spinner';

const ImageGenerator: React.FC = () => {
  const [prompt, setPrompt] = useState<string>('A photorealistic image of a futuristic city at sunset, with flying cars.');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    if (!prompt.trim()) {
      setError("Prompt cannot be empty.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setGeneratedImage(null);

    try {
      const imageB64 = await generateImage(prompt);
      setGeneratedImage(`data:image/png;base64,${imageB64}`);
    } catch (err) {
      setError(err instanceof Error ? err.message : "An unknown error occurred.");
    } finally {
      setIsLoading(false);
    }
  }, [prompt]);

  return (
    <div className="space-y-8">
      <form onSubmit={handleSubmit} className="p-6 bg-white dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 space-y-4">
        <div>
          <label htmlFor="prompt-gen" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Image Description</label>
          <textarea
            id="prompt-gen"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="e.g., A majestic lion with a crown of stars"
            className="w-full bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-md p-3 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-teal-500 focus:border-teal-500 transition"
            rows={3}
          />
        </div>
        <button
          type="submit"
          disabled={isLoading}
          className="w-full flex justify-center items-center gap-2 bg-teal-600 hover:bg-teal-700 disabled:bg-teal-800 dark:disabled:bg-teal-900 disabled:text-gray-200 dark:disabled:text-gray-400 text-white font-bold py-3 px-4 rounded-md transition-colors duration-300"
        >
          {isLoading ? <><Spinner /> Generating...</> : 'Generate Image'}
        </button>
      </form>

      {error && <div className="text-red-500 dark:text-red-400 bg-red-100 dark:bg-red-900/50 p-3 rounded-md text-center">{error}</div>}

      <div className="flex justify-center items-center p-6 bg-white dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 min-h-[400px]">
        {isLoading && <div className="text-center text-gray-500 dark:text-gray-400 flex flex-col items-center gap-4"><Spinner /><span>Generating your image... This might take a moment.</span></div>}
        {!isLoading && !generatedImage && <div className="text-gray-500">Your generated image will appear here.</div>}
        {generatedImage && (
          <img src={generatedImage} alt="Generated by AI" className="rounded-lg max-w-full max-h-[512px] shadow-lg" />
        )}
      </div>
    </div>
  );
};

export default ImageGenerator;
